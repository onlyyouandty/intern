class JobPostingsController < InheritedResources::Base
# GET /job_postings
# GET /job_postings.json
  before_filter :authenticate_user!, :get_user
  #keep user from accessing their profile if they haven't created it yet
  before_filter :profile_redir
  #keep user from accessing any method that isn't connected to their profile
  before_filter(:except =>[:index, :search]) {
      |c|
    if JobPosting.exists?(params[:id])
      c.deny_access(JobPosting.find(params[:id].to_i).company_profile_id)
    else
      if c.get_profile_type != "company"
        c.deny_access(-1)
      end
    end}
  #redirect company if they haven't been verified
  before_filter :verified?


  def index
    @job_postings = JobPosting.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @job_postings }
    end
  end

  def search

    @job_postings_all = JobPosting.all
    @return = []
    @cultures = ['']
    Groups.all.each do |culture|
      @cultures.push(culture.description)
    end
    @pay = ['', 'Paid', 'Unpaid']


    if params[:position_text]
      if params[:position_text] != "" and params[:description_text] != "" and params[:paid_text] != "" and params[:requirements_text] != ""
        match_term1 = "%" + params[:position_text] + "%"
        match_term2 = "%" + params[:description_text] + "%"
        match_term3 = "%" + params[:paid_text] + "%"
        match_term4 = "%" + params[:requirements_text] + "%"
        @job_postings = JobPosting.where("Position LIKE ? AND Job_description LIKE ? AND Job_paid LIKE ? AND Job_requirements LIKE ?", match_term1, match_term2, match_term3, match_term4)
      elsif params[:position_text] != "" and params[:description_text] != "" and params[:paid_text] != ""
        match_term1 = "%" + params[:position_text] + "%"
        match_term2 = "%" + params[:description_text] + "%"
        match_term3 = "%" + params[:paid_text] + "%"
        @job_postings = JobPosting.where("Position LIKE ? AND Job_description LIKE ? AND Job_paid LIKE ?", match_term1, match_term2, match_term3)
      elsif params[:position_text] != "" and params[:description_text] != "" and params[:requirements_text] != ""
        match_term1 = "%" + params[:position_text] + "%"
        match_term2 = "%" + params[:description_text] + "%"
        match_term4 = "%" + params[:requirements_text] + "%"
        @job_postings = JobPosting.where("Position LIKE ? AND Job_description LIKE ? AND Job_requirements LIKE ?", match_term1, match_term2, match_term4)
      elsif params[:position_text] != "" and params[:paid_text] != "" and params[:requirements_text] != ""
        match_term1 = "%" + params[:position_text] + "%"
        match_term3 = "%" + params[:paid_text] + "%"
        match_term4 = "%" + params[:requirements_text] + "%"
        @job_postings = JobPosting.where("Position LIKE ? AND Job_paid LIKE ? AND Job_requirements LIKE ?", match_term1, match_term3, match_term4)
      elsif params[:description_text] != "" and params[:paid_text] != "" and params[:requirements_text] != ""
        match_term2 = "%" + params[:description_text] + "%"
        match_term3 = "%" + params[:paid_text] + "%"
        match_term4 = "%" + params[:requirements_text] + "%"
        @job_postings = JobPosting.where("Job_description LIKE ? AND Job_paid LIKE ? AND Job_requirements LIKE ?", match_term2, match_term3, match_term4)
      elsif params[:position_text] != "" and params[:description_text] != ""
        match_term1 = "%" + params[:position_text] + "%"
        match_term2 = "%" + params[:description_text] + "%"
        @job_postings = JobPosting.where("Position LIKE ? AND Job_description LIKE ?", match_term1, match_term2)
      elsif params[:position_text] != "" and params[:paid_text] != ""
        match_term1 = "%" + params[:position_text] + "%"
        match_term3 = "%" + params[:paid_text] + "%"
        @job_postings = JobPosting.where("Position LIKE ? AND Job_paid LIKE ?", match_term1, match_term3)
      elsif params[:position_text] != "" and params[:requirements_text] != ""
        match_term1 = "%" + params[:position_text] + "%"
        match_term4 = "%" + params[:requirements_text] + "%"
        @job_postings = JobPosting.where("Position LIKE ? AND Job_requirements LIKE ?", match_term1, match_term4)
      elsif params[:description_text] != "" and params[:paid_text] != ""
        match_term2 = "%" + params[:description_text] + "%"
        match_term3 = "%" + params[:paid_text] + "%"
        @job_postings = JobPosting.where("Job_description LIKE ? AND Job_paid LIKE ?", match_term2, match_term3)
      elsif params[:description_text] != "" and params[:requirements_text] != ""
        match_term2 = "%" + params[:description_text] + "%"
        match_term4 = "%" + params[:requirements_text] + "%"
        @job_postings = JobPosting.where("Job_description LIKE ? AND Job_requirements LIKE ?", match_term2, match_term4)
      elsif params[:paid_text] != "" and params[:requirements_text] != ""
        match_term3 = "%" + params[:paid_text] + "%"
        match_term4 = "%" + params[:requirements_text] + "%"
        @job_postings = JobPosting.where("Job_paid LIKE ? AND Job_requirements LIKE ?", match_term3, match_term4)
      elsif params[:position_text] != ""
        match_term1 = "%" + params[:position_text] + "%"
        @job_postings = JobPosting.where("Position LIKE ?", match_term1)
      elsif params[:description_text] != ""
        match_term2 = "%" + params[:description_text] + "%"
        @job_postings = JobPosting.where("Job_description LIKE ?", match_term2)
      elsif params[:paid_text] != ""
        match_term3 = "%" + params[:paid_text] + "%"
        @job_postings = JobPosting.where("Job_paid LIKE ?", match_term3)
      elsif params[:requirements_text] != ""
        match_term4 = "%" + params[:requirements_text] + "%"
        @job_postings = JobPosting.where("Job_requirements LIKE ?", match_term4)
      end

      if params[:culture] != ''
        #culture is set but there are no search hits
        if @job_postings.nil?
          @job_postings_all.each do |profile|
            if CompanyProfile.find(profile.company_profile_id).qsort == params[:culture]
              @return.append(profile)
            end
          end
          #culture is set and there are search hits
        else
          @job_postings.each do |profile|
            if CompanyProfile.find(profile.company_profile_id).qsort == params[:culture]
              @return.append(profile)
            end
          end
        end
        #no culture is set
      else
        @return = @job_postings
      end
    else
      #when the search page is initially visited, displays all of the job postings
      @return = @job_postings_all
    end
  end


  # GET /job_postings/1
  # GET /job_postings/1.json
  def show
    @job_posting = JobPosting.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @job_posting }
    end
  end

  # GET /job_postings/new
  # GET /job_postings/new.json
  def new
    @job_posting = JobPosting.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @job_posting }
    end
  end

  # GET /job_postings/1/edit
  def edit
    @job_posting = JobPosting.find(params[:id])
  end

  # POST /job_postings
  # POST /job_postings.json
  def create
    @job_posting = JobPosting.new(params[:job_posting])
    @job_posting.user_id = @user.id
    @job_posting.company_profile_id = @user.id
    @job_posting.posted_on = Time.now

    respond_to do |format|
      if @job_posting.save
        format.html { redirect_to company_profile_url(@user), notice: 'Job posting was successfully created.' }
        format.json { render json: @job_posting, status: :created, location: @job_posting }
      else
        format.html { render action: "new" }
        format.json { render json: @job_posting.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /job_postings/1
  # PUT /job_postings/1.json
  def update
    @job_posting = JobPosting.find(params[:id])

    respond_to do |format|
      if @job_posting.update_attributes(params[:job_posting])
        format.html { redirect_to company_profile_url(@user), notice: 'Job posting was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @job_posting.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /job_postings/1
  # DELETE /job_postings/1.json
  def destroy
    @job_posting = JobPosting.find(params[:id])
    @job_posting.destroy

    respond_to do |format|
      format.html { redirect_to company_profile_url(@user), notice: 'Job posting was successfully deleted.'  }
      format.json { head :no_content }
    end
  end
end

